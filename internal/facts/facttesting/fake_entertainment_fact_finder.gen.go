// Code generated by counterfeiter. DO NOT EDIT.
package facttesting

import (
	"context"
	"sync"

	"github.com/c-beltran/funfacts/internal/facts"
	"github.com/c-beltran/funfacts/internal/facts/service"
)

type FakeEntertainmentFactFinder struct {
	FindEntertainmentFactStub        func(context.Context) (facts.FactTopic, error)
	findEntertainmentFactMutex       sync.RWMutex
	findEntertainmentFactArgsForCall []struct {
		arg1 context.Context
	}
	findEntertainmentFactReturns struct {
		result1 facts.FactTopic
		result2 error
	}
	findEntertainmentFactReturnsOnCall map[int]struct {
		result1 facts.FactTopic
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEntertainmentFactFinder) FindEntertainmentFact(arg1 context.Context) (facts.FactTopic, error) {
	fake.findEntertainmentFactMutex.Lock()
	ret, specificReturn := fake.findEntertainmentFactReturnsOnCall[len(fake.findEntertainmentFactArgsForCall)]
	fake.findEntertainmentFactArgsForCall = append(fake.findEntertainmentFactArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FindEntertainmentFactStub
	fakeReturns := fake.findEntertainmentFactReturns
	fake.recordInvocation("FindEntertainmentFact", []interface{}{arg1})
	fake.findEntertainmentFactMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEntertainmentFactFinder) FindEntertainmentFactCallCount() int {
	fake.findEntertainmentFactMutex.RLock()
	defer fake.findEntertainmentFactMutex.RUnlock()
	return len(fake.findEntertainmentFactArgsForCall)
}

func (fake *FakeEntertainmentFactFinder) FindEntertainmentFactCalls(stub func(context.Context) (facts.FactTopic, error)) {
	fake.findEntertainmentFactMutex.Lock()
	defer fake.findEntertainmentFactMutex.Unlock()
	fake.FindEntertainmentFactStub = stub
}

func (fake *FakeEntertainmentFactFinder) FindEntertainmentFactArgsForCall(i int) context.Context {
	fake.findEntertainmentFactMutex.RLock()
	defer fake.findEntertainmentFactMutex.RUnlock()
	argsForCall := fake.findEntertainmentFactArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEntertainmentFactFinder) FindEntertainmentFactReturns(result1 facts.FactTopic, result2 error) {
	fake.findEntertainmentFactMutex.Lock()
	defer fake.findEntertainmentFactMutex.Unlock()
	fake.FindEntertainmentFactStub = nil
	fake.findEntertainmentFactReturns = struct {
		result1 facts.FactTopic
		result2 error
	}{result1, result2}
}

func (fake *FakeEntertainmentFactFinder) FindEntertainmentFactReturnsOnCall(i int, result1 facts.FactTopic, result2 error) {
	fake.findEntertainmentFactMutex.Lock()
	defer fake.findEntertainmentFactMutex.Unlock()
	fake.FindEntertainmentFactStub = nil
	if fake.findEntertainmentFactReturnsOnCall == nil {
		fake.findEntertainmentFactReturnsOnCall = make(map[int]struct {
			result1 facts.FactTopic
			result2 error
		})
	}
	fake.findEntertainmentFactReturnsOnCall[i] = struct {
		result1 facts.FactTopic
		result2 error
	}{result1, result2}
}

func (fake *FakeEntertainmentFactFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findEntertainmentFactMutex.RLock()
	defer fake.findEntertainmentFactMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEntertainmentFactFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.EntertainmentFactFinder = new(FakeEntertainmentFactFinder)
