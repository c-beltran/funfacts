// Code generated by counterfeiter. DO NOT EDIT.
package facttesting

import (
	"context"
	"sync"

	"github.com/c-beltran/funfacts/internal/facts"
	"github.com/c-beltran/funfacts/internal/facts/service"
)

type FakeCatFactFinder struct {
	FindCatFactStub        func(context.Context) (facts.FactTopic, error)
	findCatFactMutex       sync.RWMutex
	findCatFactArgsForCall []struct {
		arg1 context.Context
	}
	findCatFactReturns struct {
		result1 facts.FactTopic
		result2 error
	}
	findCatFactReturnsOnCall map[int]struct {
		result1 facts.FactTopic
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCatFactFinder) FindCatFact(arg1 context.Context) (facts.FactTopic, error) {
	fake.findCatFactMutex.Lock()
	ret, specificReturn := fake.findCatFactReturnsOnCall[len(fake.findCatFactArgsForCall)]
	fake.findCatFactArgsForCall = append(fake.findCatFactArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FindCatFactStub
	fakeReturns := fake.findCatFactReturns
	fake.recordInvocation("FindCatFact", []interface{}{arg1})
	fake.findCatFactMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCatFactFinder) FindCatFactCallCount() int {
	fake.findCatFactMutex.RLock()
	defer fake.findCatFactMutex.RUnlock()
	return len(fake.findCatFactArgsForCall)
}

func (fake *FakeCatFactFinder) FindCatFactCalls(stub func(context.Context) (facts.FactTopic, error)) {
	fake.findCatFactMutex.Lock()
	defer fake.findCatFactMutex.Unlock()
	fake.FindCatFactStub = stub
}

func (fake *FakeCatFactFinder) FindCatFactArgsForCall(i int) context.Context {
	fake.findCatFactMutex.RLock()
	defer fake.findCatFactMutex.RUnlock()
	argsForCall := fake.findCatFactArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCatFactFinder) FindCatFactReturns(result1 facts.FactTopic, result2 error) {
	fake.findCatFactMutex.Lock()
	defer fake.findCatFactMutex.Unlock()
	fake.FindCatFactStub = nil
	fake.findCatFactReturns = struct {
		result1 facts.FactTopic
		result2 error
	}{result1, result2}
}

func (fake *FakeCatFactFinder) FindCatFactReturnsOnCall(i int, result1 facts.FactTopic, result2 error) {
	fake.findCatFactMutex.Lock()
	defer fake.findCatFactMutex.Unlock()
	fake.FindCatFactStub = nil
	if fake.findCatFactReturnsOnCall == nil {
		fake.findCatFactReturnsOnCall = make(map[int]struct {
			result1 facts.FactTopic
			result2 error
		})
	}
	fake.findCatFactReturnsOnCall[i] = struct {
		result1 facts.FactTopic
		result2 error
	}{result1, result2}
}

func (fake *FakeCatFactFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findCatFactMutex.RLock()
	defer fake.findCatFactMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCatFactFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.CatFactFinder = new(FakeCatFactFinder)
